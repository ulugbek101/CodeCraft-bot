from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from keyboards.default import users
from keyboards.default.users import settings_menu
from keyboards.inline.users.courses_menu import generate_courses_menu, generate_register_to_course_menu
from loader import dp, db
from tools.permissions import private_chat
from data.config import branches

from geopy.distance import geodesic


@dp.message_handler(Text("üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"))
async def send_contacts(message: Message):
    if private_chat(message):
        msg = " üë§ <b>–ê–¥–º–∏–Ω: @CodeCraftedu</b>\n"
        msg += 'üì£ <b>–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: <a href="https://t.me/art_of_coding">CodeCraft</a></b>\n'
        msg += "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–º–∏–Ω–∞: \n" \
               "    1. +998903005500\n" \
               "    2. +998995845551</b>\n"
        await message.answer(msg)


@dp.message_handler(Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def manage_settings(message: Message):
    if private_chat(message):
        is_subscribed = db.get_user(chat_id=message.from_user.id)[4]
        await message.answer("<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞</b>",
                             reply_markup=users.settings_menu.generate_settings_menu(is_subscribed))


@dp.message_handler(Text("üîç –£–∑–Ω–∞—Ç—å –æ –∫—É—Ä—Å–∞—Ö"))
async def show_courses_menu(message: Message):
    if private_chat(message):
        await message.answer(
            "<b>–£ –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã üëá, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∫—É—Ä—Å–µ</b>",
            reply_markup=generate_courses_menu(tuple([course[:2] for course in db.get_courses()])))


@dp.message_handler(content_types='location')
async def send_location(message: Message):
    if private_chat(message):
        await message.answer(f"<b>–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –Ω–∞—Å {len(branches)} —Ñ–∏–ª–∏–∞–ª–∞</b>")
        for branch in branches:
            await message.answer(f"<b>–†–∞—Å—Å—Ç—è–Ω–∏–µ —Å –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ —ç—Ç–æ–≥–æ üëá —Ñ–∏–ª–∏–∞–ª–∞, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                 f"{round(geodesic((message.location.latitude, message.location.longitude), branch).km, 2)} "
                                 f"km. </b>")
            await message.answer_location(
                latitude=branch[0],
                longitude=branch[1]
            )


@dp.callback_query_handler(lambda call: "course-info" == call.data.split(":")[0])
async def show_course_info(call: CallbackQuery):
    if private_chat(call.message):
        course_id = int(call.data.split(":")[1])
        course = db.get_course(course_id)
        with open(file=f'{course[2]}', mode='r', encoding='UTF-8') as file:
            text = file.read()
        with open(file=f'{course[3]}', mode='rb') as photo:
            await call.message.answer_photo(photo=photo, caption=text,
                                            reply_markup=generate_register_to_course_menu(course_id=course_id))
        await call.message.delete()


@dp.message_handler(Text("‚ùåüì© –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
@dp.message_handler(Text("‚úÖüì© –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
async def notification_manage(message: Message):
    if private_chat(message):
        subscription_state = db.get_user(message.from_user.id)[4]
        print(subscription_state)
        db.update_user_subscription_state(is_subscribed=0 if int(subscription_state) == 1 else 1,
                                          chat_id=message.from_user.id)
        await message.answer(f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <i>{'–≤–∫–ª—é—á–µ–Ω—ã' if subscription_state == 0 else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}</i></b>",
                             reply_markup=settings_menu.generate_settings_menu(
                                 user_subscribed_state=1 if subscription_state == 0 else 0
                             ))
