from aiogram.contrib.middlewares.fsm import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
from aiogram import types

from loader import dp, db
from tools.permissions import private_chat
from keyboards import default
from keyboards import inline
from states.users.open_lessons import OpenLessonRegisterState


@dp.message_handler(Text("üñãüìÑ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫"))
async def open_lesson_state_manage(message: Message):
    if private_chat(message):
        open_lessons = db.get_open_lessons()
        if len(open_lessons) > 0:
            i = 0
            msg = f"<b>–£ –Ω–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ –±–ª–∏–∂–∞—â–∏–µ –¥–∞—Ç—ã</b>\n\n"
            for lesson in open_lessons:
                i += 1
                msg += f"{i}) {'-' * 20}\n–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —É—Ä–æ–∫–∞: <i>{lesson[1].replace('_', ' ').title()}</i>\n"
                msg += f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <i>{lesson[2]}</i>\n\n"
            await message.answer(msg,
                                 reply_markup=inline.users.open_lessons_menu.generate_open_lessons_menu(
                                     tuple([lesson[:2] for lesson in open_lessons])
                                 ))
        else:
            await message.answer("<b>–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ ü§î</b>",
                                 reply_markup=default.main_menu.generate_main_menu())


@dp.callback_query_handler(lambda call: "open-lesson-register" == call.data.split(":")[0])
async def open_lesson_state_start(call: CallbackQuery, state: FSMContext):
    table_name = db.get_open_lesson(int(call.data.split(":")[1]))[1]
    await OpenLessonRegisterState.full_name.set()
    await state.update_data(table_name=table_name)
    await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è</b>", reply_markup=default.cancel_btn.generate_cancel_btn())
    await call.message.delete()


@dp.message_handler(state=OpenLessonRegisterState.full_name)
async def save_fullname(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await OpenLessonRegisterState.next()
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>",
                         reply_markup=default.users.contact_send_menu.generate_send_contact_menu())


@dp.message_handler(state=OpenLessonRegisterState.tel)
@dp.message_handler(state=OpenLessonRegisterState.tel, content_types=types.ContentType.CONTACT)
async def save_tel(message: Message, state: FSMContext):
    if message.contact:
        await state.update_data(tel=message.contact.phone_number)
    else:
        await state.update_data(tel=message.text)
    try:
        await state.update_data(user_name=message.from_user.username)
    except:
        await state.update_data(user_name='-')
    await state.update_data(chat_id=message.from_user.id)
    async with state.proxy() as data:
        db.register_student_to_open_lesson(
            table_name=data['table_name'],
            chat_id=data['chat_id'],
            tel=data['tel'],
            full_name=data['full_name'],
            user_name=data['user_name']
        )
    await state.finish()
    await message.answer(
        "<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π üòâ</b>",
        reply_markup=default.main_menu.generate_main_menu())
